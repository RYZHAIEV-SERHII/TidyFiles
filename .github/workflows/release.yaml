# Workflow name that appears in GitHub Actions UI
name: Release

# Trigger conditions for the workflow
on:
  push:
    branches:
      - main  # Runs on pushes to main branch
    tags:     # Also runs when these tag patterns are pushed
      - "[0-9]+.[0-9]+.[0-9]+"        # Standard releases (e.g., 1.2.3)
      - "[0-9]+.[0-9]+.[0-9]+a[0-9]+" # Alpha releases (e.g., 1.2.3a1)
      - "[0-9]+.[0-9]+.[0-9]+b[0-9]+" # Beta releases (e.g., 1.2.3b1)
      - "[0-9]+.[0-9]+.[0-9]+rc[0-9]+" # Release candidates (e.g., 1.2.3rc1)

# Global environment variables available to all jobs
env:
  PACKAGE_NAME: "TidyFiles"
  OWNER: "RYZHAIEV-SERHII"

# List of jobs to run
jobs:
  # Primary release job that handles semantic versioning
  release:
    runs-on: ubuntu-latest
    # Prevent concurrent releases and ensure ordered execution
    concurrency:
      group: ${{ github.workflow }}-release-${{ github.ref_name }}
      cancel-in-progress: false
    # Required permissions for release operations
    permissions:
      id-token: write  # Required for trusted publishing
      contents: write  # Required for creating releases
    # Outputs that can be used by other jobs
    outputs:
      released: ${{ steps.release.outputs.released }}
      version: ${{ steps.release.outputs.version }}
      tag: ${{ steps.release.outputs.tag }}

    steps:
      # Check out the repository with full history for semantic-release
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}
          fetch-depth: 0  # Full history needed for semantic-release

      # Ensure we're at the exact commit that triggered the workflow
      - name: Force release branch to workflow SHA
        run: git reset --hard ${{ github.sha }}

      # Safety check to ensure no changes occurred while workflow was queued
      - name: Verify upstream hasn't changed
        shell: bash
        run: |
          set +o pipefail
          UPSTREAM_BRANCH_NAME="$(git status -sb | head -n 1 | cut -d' ' -f2 | grep -E '\.{3}' | cut -d'.' -f4)"
          printf '%s\n' "Upstream branch name: $UPSTREAM_BRANCH_NAME"
          set -o pipefail

          if [ -z "$UPSTREAM_BRANCH_NAME" ]; then
              printf >&2 '%s\n' "::error::Unable to determine upstream branch name!"
              exit 1
          fi

          git fetch "${UPSTREAM_BRANCH_NAME%%/*}"

          if ! UPSTREAM_SHA="$(git rev-parse "$UPSTREAM_BRANCH_NAME")"; then
              printf >&2 '%s\n' "::error::Unable to determine upstream branch sha!"
              exit 1
          fi

          HEAD_SHA="$(git rev-parse HEAD)"

          if [ "$HEAD_SHA" != "$UPSTREAM_SHA" ]; then
              printf >&2 '%s\n' "[HEAD SHA] $HEAD_SHA != $UPSTREAM_SHA [UPSTREAM SHA]"
              printf >&2 '%s\n' "::error::Upstream has changed, aborting release..."
              exit 1
          fi

      # Set up Python environment according to pyproject.toml
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: "pyproject.toml"

      # Install uv package manager for faster dependency management
      - name: Install uv
        uses: astral-sh/setup-uv@v5

      # Install project dependencies
      - name: Install dependencies
        run: uv sync

      # Run semantic-release to determine version and create release
      - name: Semantic Release
        id: release
        uses: python-semantic-release/python-semantic-release@v9.21.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          git_committer_name: "github-actions"
          git_committer_email: "actions@users.noreply.github.com"

  # Job to build the Python package
  build:
    needs: release  # Depends on release job
    if: needs.release.outputs.released == 'true'  # Only run if new version was released
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository at the new release tag
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.release.outputs.tag }}

      # Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: "pyproject.toml"

      # Install uv for dependency management
      - name: Install uv
        uses: astral-sh/setup-uv@v5

      # Install project dependencies
      - name: Install dependencies
        run: uv sync

      # Build Python package distributions
      - name: Build package
        run: uv build

      # Save built distributions as artifacts
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  # Job to publish the package to PyPI
  pypi_publish:
    needs: [release, build]  # Requires both release and build jobs
    if: needs.release.outputs.released == 'true'  # Only run if new version was released
    runs-on: ubuntu-latest
    environment:
      name: release  # Use release environment for PyPI credentials
    permissions:
      id-token: write  # Required for trusted publishing
    steps:
      # Download built package distributions
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      # Publish to PyPI using trusted publishing
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

  # Job to upload assets to GitHub Release
  github_assets:
    needs: [release, build]  # Requires both release and build jobs
    if: needs.release.outputs.released == 'true'  # Only run if new version was released
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Required for uploading release assets
    steps:
      # Download built package distributions
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      # Upload distributions to GitHub Release
      - name: Upload to GitHub Release
        uses: python-semantic-release/publish-action@v9.21.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ needs.release.outputs.tag }}
